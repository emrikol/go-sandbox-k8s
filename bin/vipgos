#!/bin/bash

# Do not run in a sandbox!
if [ "${IS_VIP_SANDBOX_CONTAINER:-}" = "true" ]; then
	echo "Error: The script is running in a VIP sandbox."
	exit 1
fi

# Check to see if we can copy the config file.
if ! grep -qE '^[[:space:]]*PermitLocalCommand[[:space:]]+yes$' /etc/ssh/ssh_config; then
	echo "Error: PermitLocalCommand not enabled in /etc/ssh/ssh_config"

	# Check if the /etc/ssh/ssh_config file contains the line "#   PermitLocalCommand no"
	if grep -qE '^#   PermitLocalCommand no$' /etc/ssh/ssh_config; then
		echo "    Run the following command to automatically fix it:"
		# Check if we need sudo for write permission
		echo -n "    "
		[[ ! -w /etc/ssh/ssh_config ]] && echo -n "sudo "
		echo "sed -i '' 's/^#   PermitLocalCommand no$/   PermitLocalCommand no # Allow LocalCommands for vipgos/' /etc/ssh/ssh_config"
	fi
	exit 1
fi

# Check if 'jq' command is installed
if ! command -v jq &> /dev/null; then
	echo "'jq' command not found. Please install it with 'brew install jq'." >&2
	exit 1
fi

# Check for go-sandbox config.
#
# Example ~/.go-sandbox.json config:
# {
# 	"GIT_CONFIG_EMAIL": "leeroy.jenkins@example.com",
# 	"GIT_CONFIG_USER": "Leeroy Jenkins"
# }
if [ ! -f ~/.go-sandbox.json ]; then
	echo "$HOME/.go-sandbox.json config file not found!"
	echo
	sleep 5 # Wait for 5 seconds to give the user a chance to read the error message.
fi

# Check if the go-sandbox config file is valid JSON using the 'jq' command.
jq < ~/.go-sandbox.json > /dev/null 2>&1 || { echo "$HOME/.go-sandbox.json config file invalid JSON! Exiting"; exit 1; }

# Set VIP Go Site hostname/ID.
VIPGO_ID="$1"

# Check if the user is logged in to the VIP Go environment using the 'vipgo' command.
vipgo api GET / 2>&1 | grep -q "Invalid or expired" && echo "Invalid or expired token. Please login with 'vipgo login'" && exit

# Connect to the sandbox environment.
vipgo sandbox start "$VIPGO_ID" -A "$@"
